# Generated by Django 5.2.1 on 2025-05-11 18:49

import uuid

import django.db.models.deletion
import modelcluster.fields
import wagtail.fields
import wagtail.models.preview
from django.db import migrations, models


class Migration(migrations.Migration):
    replaces = [
        ("blog", "0001_initial"),
        ("blog", "0002_alter_customflatpage_options_post"),
        ("blog", "0003_post_modified"),
        ("blog", "0004_alter_post_summary"),
        ("blog", "0005_alter_post_is_draft"),
        ("blog", "0006_blogindexpage_blogpostpage_flatpage_homepage"),
        ("blog", "0007_menu_menuitem"),
        ("blog", "0008_footertext"),
        ("blog", "0009_nowindexpage_nowpostpage_thenindexpage"),
        ("blog", "0010_alter_blogpostpage_body"),
        ("blog", "0011_alter_blogpostpage_body"),
        ("blog", "0012_alter_blogpostpage_body"),
        ("blog", "0013_alter_blogpostpage_body"),
        ("blog", "0014_alter_blogpostpage_body"),
        ("blog", "0015_flatpage_body_stream"),
        ("blog", "0016_remove_flatpage_body"),
        ("blog", "0017_rename_body_stream_flatpage_body"),
        ("blog", "0018_nowpostpage_body_stream"),
        ("blog", "0019_remove_nowpostpage_body"),
        ("blog", "0020_rename_body_stream_nowpostpage_body"),
        ("blog", "0021_alter_flatpage_body"),
        ("blog", "0022_alter_flatpage_body"),
        ("blog", "0023_alter_flatpage_body"),
        ("blog", "0024_alter_blogpostpage_body_alter_flatpage_body_and_more"),
        ("blog", "0025_alter_blogpostpage_body_alter_flatpage_body_and_more"),
        ("blog", "0026_alter_blogpostpage_body_alter_flatpage_body_and_more"),
        ("blog", "0027_alter_blogpostpage_body_alter_flatpage_body_and_more"),
        ("blog", "0028_remove_nowpostpage_intro_alter_blogpostpage_body_and_more"),
        ("blog", "0029_alter_blogpostpage_body_alter_flatpage_body_and_more"),
        ("blog", "0030_delete_customflatpage"),
        ("blog", "0031_remove_post_categories_remove_post_tags"),
        ("blog", "0032_delete_post"),
    ]

    dependencies = [
        ("core", "0005_alter_imageupload_original_and_more"),
        ("flatpages", "0001_initial"),
        ("wagtailcore", "0094_alter_page_locale"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("body", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Menu",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.SlugField(unique=True)),
                ("label", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MenuItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("title", models.CharField(max_length=255)),
                ("external_url", models.URLField(blank=True)),
                (
                    "rel",
                    models.CharField(
                        blank=True,
                        help_text="Optional rel attribute, e.g. 'me'",
                        max_length=255,
                    ),
                ),
                (
                    "link_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "menu",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="blog.menu",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FooterText",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "translation_key",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "live",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="live"
                    ),
                ),
                (
                    "has_unpublished_changes",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name="has unpublished changes",
                    ),
                ),
                (
                    "first_published_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="first published at",
                    ),
                ),
                (
                    "last_published_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="last published at"
                    ),
                ),
                (
                    "go_live_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="go live date/time"
                    ),
                ),
                (
                    "expire_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="expiry date/time"
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="expired"
                    ),
                ),
                ("body", wagtail.fields.RichTextField(blank=True)),
                (
                    "latest_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="latest revision",
                    ),
                ),
                (
                    "live_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="live revision",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailcore.locale",
                        verbose_name="locale",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Footer Text",
                "abstract": False,
                "unique_together": {("translation_key", "locale")},
            },
            bases=(wagtail.models.preview.PreviewableMixin, models.Model),
        ),
        migrations.CreateModel(
            name="NowIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ThenIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BlogPostPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("date", models.DateField(verbose_name="Post date")),
                ("intro", models.CharField(max_length=250)),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("blockquote", 0),
                            ("paragraph", 1),
                            ("image", 2),
                            ("captioned_image", 4),
                            ("code", 7),
                            ("details", 11),
                        ],
                        blank=True,
                        block_lookup={
                            0: ("wagtail.blocks.BlockQuoteBlock", (), {}),
                            1: (
                                "wagtail_footnotes.blocks.RichTextBlockWithFootnotes",
                                (),
                                {
                                    "features": [
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "ol",
                                        "ul",
                                        "link",
                                        "document-link",
                                        "code",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "blockquote",
                                        "footnotes",
                                    ]
                                },
                            ),
                            2: ("wagtail.images.blocks.ImageBlock", [], {}),
                            3: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"required": False},
                            ),
                            4: (
                                "wagtail.blocks.StructBlock",
                                [[("image", 2), ("caption", 3)]],
                                {},
                            ),
                            5: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("", "Plain text"),
                                        ("bash", "Bash/Shell"),
                                        ("python", "Python"),
                                    ],
                                    "help_text": "Language for syntax highlighting",
                                    "required": False,
                                },
                            ),
                            6: ("wagtail.blocks.TextBlock", (), {}),
                            7: (
                                "wagtail.blocks.StructBlock",
                                [[("language", 5), ("code", 6)]],
                                {},
                            ),
                            8: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Text shown in the summary",
                                    "required": True,
                                },
                            ),
                            9: ("wagtail.blocks.RichTextBlock", (), {}),
                            10: (
                                "wagtail.blocks.StreamBlock",
                                [[("paragraph", 9), ("code", 7)]],
                                {},
                            ),
                            11: (
                                "wagtail.blocks.StructBlock",
                                [[("summary", 8), ("details", 10)]],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="FlatPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("blockquote", 0),
                            ("paragraph", 1),
                            ("image", 2),
                            ("captioned_image", 4),
                            ("code", 7),
                            ("details", 11),
                        ],
                        blank=True,
                        block_lookup={
                            0: ("wagtail.blocks.BlockQuoteBlock", (), {}),
                            1: (
                                "wagtail_footnotes.blocks.RichTextBlockWithFootnotes",
                                (),
                                {
                                    "features": [
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "ol",
                                        "ul",
                                        "link",
                                        "document-link",
                                        "code",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "blockquote",
                                        "footnotes",
                                    ]
                                },
                            ),
                            2: ("wagtail.images.blocks.ImageBlock", [], {}),
                            3: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"required": False},
                            ),
                            4: (
                                "wagtail.blocks.StructBlock",
                                [[("image", 2), ("caption", 3)]],
                                {},
                            ),
                            5: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("", "Plain text"),
                                        ("bash", "Bash/Shell"),
                                        ("python", "Python"),
                                    ],
                                    "help_text": "Language for syntax highlighting",
                                    "required": False,
                                },
                            ),
                            6: ("wagtail.blocks.TextBlock", (), {}),
                            7: (
                                "wagtail.blocks.StructBlock",
                                [[("language", 5), ("code", 6)]],
                                {},
                            ),
                            8: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Text shown in the summary",
                                    "required": True,
                                },
                            ),
                            9: ("wagtail.blocks.RichTextBlock", (), {}),
                            10: (
                                "wagtail.blocks.StreamBlock",
                                [[("paragraph", 9), ("code", 7)]],
                                {},
                            ),
                            11: (
                                "wagtail.blocks.StructBlock",
                                [[("summary", 8), ("details", 10)]],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="NowPostPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("date", models.DateField(verbose_name="Post date")),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("blockquote", 0),
                            ("paragraph", 1),
                            ("image", 2),
                            ("captioned_image", 4),
                            ("code", 7),
                            ("details", 11),
                        ],
                        blank=True,
                        block_lookup={
                            0: ("wagtail.blocks.BlockQuoteBlock", (), {}),
                            1: (
                                "wagtail_footnotes.blocks.RichTextBlockWithFootnotes",
                                (),
                                {
                                    "features": [
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "italic",
                                        "ol",
                                        "ul",
                                        "link",
                                        "document-link",
                                        "code",
                                        "superscript",
                                        "subscript",
                                        "strikethrough",
                                        "blockquote",
                                        "footnotes",
                                    ]
                                },
                            ),
                            2: ("wagtail.images.blocks.ImageBlock", [], {}),
                            3: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"required": False},
                            ),
                            4: (
                                "wagtail.blocks.StructBlock",
                                [[("image", 2), ("caption", 3)]],
                                {},
                            ),
                            5: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("", "Plain text"),
                                        ("bash", "Bash/Shell"),
                                        ("python", "Python"),
                                    ],
                                    "help_text": "Language for syntax highlighting",
                                    "required": False,
                                },
                            ),
                            6: ("wagtail.blocks.TextBlock", (), {}),
                            7: (
                                "wagtail.blocks.StructBlock",
                                [[("language", 5), ("code", 6)]],
                                {},
                            ),
                            8: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Text shown in the summary",
                                    "required": True,
                                },
                            ),
                            9: ("wagtail.blocks.RichTextBlock", (), {}),
                            10: (
                                "wagtail.blocks.StreamBlock",
                                [[("paragraph", 9), ("code", 7)]],
                                {},
                            ),
                            11: (
                                "wagtail.blocks.StructBlock",
                                [[("summary", 8), ("details", 10)]],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
    ]
